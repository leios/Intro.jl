var documenterSearchIndex = {"docs":
[{"location":"content/questions/#Other-Questions","page":"Other Questions","title":"Other Questions","text":"","category":"section"},{"location":"content/questions/","page":"Other Questions","title":"Other Questions","text":"Here is a list of various questions I have received that didn't quite fit into any of the other chapters","category":"page"},{"location":"content/questions/#Julia-on-an-Air-Gapped-System","page":"Other Questions","title":"Julia on an Air-Gapped System","text":"","category":"section"},{"location":"content/questions/","page":"Other Questions","title":"Other Questions","text":"An air-gapped system is basically one that cannot connect to the internet during program execution. This ultimately means that users connect to the system via USB and run the code from a direct, physical connection. In principle, Julia should have no problem with this; however, one of the key shortcomings of Julia is that it is not able to generate an executable and might accidentally pull packages from the Julia Registry during precompilation. Because of this, there are a couple of strategies one might use to get Julia working in such an environment.","category":"page"},{"location":"content/questions/#PkgCompiler","page":"Other Questions","title":"PkgCompiler","text":"","category":"section"},{"location":"content/questions/#Build-everything-ahead-of-time","page":"Other Questions","title":"Build everything ahead-of-time","text":"","category":"section"},{"location":"content/benchmarks/#Benchmarking-Julia","page":"Benchmarking Julia","title":"Benchmarking Julia","text":"","category":"section"},{"location":"content/benchmarks/#@time","page":"Benchmarking Julia","title":"@time","text":"","category":"section"},{"location":"content/benchmarks/#@benchmark","page":"Benchmarking Julia","title":"@benchmark","text":"","category":"section"},{"location":"content/benchmarks/","page":"Benchmarking Julia","title":"Benchmarking Julia","text":"Benchmark the claim that Julia is fast if everything is in a function, but slow otherwise. Maybe do so with a file that is line-by-line and then wrap everything in a function for the second test.","category":"page"},{"location":"content/why/#Why-Julia?","page":"Why Julia?","title":"Why Julia?","text":"","category":"section"},{"location":"content/why/","page":"Why Julia?","title":"Why Julia?","text":"It is worth spending a few minutes discussing Julia in comparison to other languages. After all, there are hundreds of languages that are all great at certain things. Web developers have completely different skill sets than research software engineers, who are still quite different than systems engineers. Java is not C, and neither are Python. Each language has it's own niche and purpose and it's sometimes difficult to decide which language will fit your own project best.","category":"page"},{"location":"content/why/","page":"Why Julia?","title":"Why Julia?","text":"So, why would you use Julia over other languages?","category":"page"},{"location":"content/why/","page":"Why Julia?","title":"Why Julia?","text":"That's actually a really good question.","category":"page"},{"location":"content/parallel/#Simple-Parallelization-with-Julia","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"","category":"section"},{"location":"content/parallel/","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"Years ago, computers were simple. Code would run on a single core that would quickly execute a single task before moving on to the next one. In a sense, many people write code with such simple devices in mind; however, this model is strictly theoretical. The computational world today is increasingly parallel. Even my oldest working computer (now over decade old) has at 2 cores available, and these cores are hyperthreaded meaning they can each do two tasks at once.","category":"page"},{"location":"content/parallel/","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"This means that if you write your code as a single set of instructions to execute on a single core, you are leaving up to 4x performance on the table!","category":"page"},{"location":"content/parallel/","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"The problem is that so much code is written with a single core in mind and it's hard to re-configure this code to work effectively on multiple processors","category":"page"},{"location":"content/parallel/","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"SIMD vs other forms of parallelism (focus on simd because this is a quickstart)\nbootlegging other code\nkernel proramming\ntouch on GPGPU","category":"page"},{"location":"content/parallel/#Threads","page":"Simple Parallelization with Julia","title":"Threads","text":"","category":"section"},{"location":"content/parallel/#Kernel-Programming","page":"Simple Parallelization with Julia","title":"Kernel Programming","text":"","category":"section"},{"location":"content/parallel/#GPGPU","page":"Simple Parallelization with Julia","title":"GPGPU","text":"","category":"section"},{"location":"content/parallel/","page":"Simple Parallelization with Julia","title":"Simple Parallelization with Julia","text":"broadcasting on GPUArrays\nJust using a kernel","category":"page"},{"location":"content/plotting/#Plotting-in-Julia","page":"Plotting in Julia","title":"Plotting in Julia","text":"","category":"section"},{"location":"content/plotting/#Plots.jl","page":"Plotting in Julia","title":"Plots.jl","text":"","category":"section"},{"location":"content/plotting/#Makie","page":"Plotting in Julia","title":"Makie","text":"","category":"section"},{"location":"content/ides/#Julia-Development-Environments","page":"Julia Development Environments","title":"Julia Development Environments","text":"","category":"section"},{"location":"content/ides/","page":"Julia Development Environments","title":"Julia Development Environments","text":"When learning to program for the first time, the hardes part is often times the very first step – just getting the code to run on your computer in the first palce! Though Julia does it's best to make this part of the process as straightforward as possible, it can still be a little challenging depending on what type of environment you want to set up. For this chapter, we will be starting with the basic shell (downloadable from the website), and then talking about different programming environments in order of complexity (at least in my opinion):","category":"page"},{"location":"content/ides/","page":"Julia Development Environments","title":"Julia Development Environments","text":"Basic text editing\nPluto notebooks\nIntegrated Development Environments (IDEs)","category":"page"},{"location":"content/ides/","page":"Julia Development Environments","title":"Julia Development Environments","text":"While reading this, please keep in mind what I mentioned in the introduction: simplicity and ease of use are inversely proportional. Even though full development environments are more difficult to set up, they provide great tooling that is hard to mimic with other development environments.","category":"page"},{"location":"content/ides/","page":"Julia Development Environments","title":"Julia Development Environments","text":"With that said, I almost always just use the simplest tool available to me unless I need something more complex. Also: I just love vi(m).","category":"page"},{"location":"content/ides/#REPL","page":"Julia Development Environments","title":"REPL","text":"","category":"section"},{"location":"content/ides/#Text-Editing","page":"Julia Development Environments","title":"Text Editing","text":"","category":"section"},{"location":"content/ides/#Pluto-(Jupyter)-Notebooks","page":"Julia Development Environments","title":"Pluto (Jupyter) Notebooks","text":"","category":"section"},{"location":"content/ides/#Integrated-Development-Environments-(IDEs),-VSCode","page":"Julia Development Environments","title":"Integrated Development Environments (IDEs), VSCode","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Notes: Mention the word \"dependencies\" sooner        add links (page numbers in the book) to where we talk about everything when I say \"we'll talk about this later\" <–- limit these!","category":"page"},{"location":"content/packages/#Package-Management-in-Julia","page":"Package Management in Julia","title":"Package Management in Julia","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"When people think about programming, they often think of it as a solitary experience and might conjure up an image of a single developer typing furiously on their keyboard until the early hours of the morning with a trusted beverage in hand. To be honest, this is only partially true. I know many programmers who do their best work around or after midnight; however, programming (at least nowadays) is anything but solitary.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Code is almost always written with a team and for many different purposes. It could be that you are writing a research paper with collegues and need to test some hypothesis. It could be that you want to write software that can be used by many other people for any sort of purpose. It could be that you are just hobby programming with friends. No matter the case, it's important to write code that can be tested and produces the same result on any computer. Nowadays, modern open source tooling makes it much easier to write such code and collaborate with other developers from around the world. The problem is that most programming languages were developed without care for such tooling.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Here, Julia is different. It was built with collaboration in mind and actively encourages the development of packages that integrate with it's package manager, which is a core component of the language and easily usable through the REPL. These packages are easy to create and make it easy for anyone else to reproduce and test code on their local machines. The package manager can also easily connect to version control systems like git and most packages are available on github. To be honest, I might argue that package management is one of the most important parts of the Julia language.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This is why I put this chapter before the chapter on Julia syntax. Package management is so fundamental to Julia that it's hard to write anything at all without using it in some capacity. That said, this chapter will cover a lot more than just the basics, so it's important for you to go at your own pace. Remember that this is a book. You choose how you want to read it.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"If you want to cover Julia syntax first, please skip or skim this chapter and come back when you are ready. If you want to learn everything now, then go right ahead!","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Take your time and enjoy the process.","category":"page"},{"location":"content/packages/#What-is-package-management?","page":"Package Management in Julia","title":"What is package management?","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Let's say you want to install software. What do you do?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well, on Windows, you often google the software you want to install, click on the appropriate link, and then click the \"download\" button on the website (all while hoping and proaying you are not accidentally installing the wrong software – or worse: a virus). On Mac and IOS, you probably first try to see if the application is available on the App Store and then download it from there. On Android, you use the Google Play Store. On Linux, you interact with your package manager.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"All of these are examples of package management. The idea is simple: there is a software package somewhere online that the user wants to download to their own computer. Someone or something needs to manage the package. In the case of Windows, it is done by the user, themself. On other devices, there is some software in the middle to do this instead.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So what does this have to do with Julia?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well, the best software developers I know actively try to write as little code as possible. Why? Because it is fundamentally better to rely on other people who are already solving the same problem.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Let's say you want to do a ...`","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"In this case, you could write the algorithm yourself, but that's a lot of work. It's fundamentlly easier to download a package from online that does the same thing. More than that, the package you find online will probably be faster than whatever you were going to write because, well, you are probably learning about the algorithm for the first time while the package developer is (hopefully) an expert on the topic.","category":"page"},{"location":"content/packages/#Installing-Packages","page":"Package Management in Julia","title":"Installing Packages","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"First things first, let's discuss how to install and use packages. If you are working from the REPL, first enter package mode by pressing ]. From there, your command prompt should turn blue and look like this:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg>","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"From here, you can add (install) an package you want with:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg> add Pkg","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So (for example), if you want to plot some data, you might do:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg> add Plots","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Note that the Plots package is technically Plots.jl, but the .jl extension is removed by the package manager.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Once the package is loaded, press backspace to enter the regular REPL so your command prompt is green and looks like this:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"julia>","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now you can use the package locally with:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"julia> using Plots","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This will take a second to download all of Plots's dependencies as well, but after that, you can use any function exported by Plots directly in your REPL. You can also use the same syntax in any file for your own package(s). If you want to use a non-exported function you can do so by calling Plots.fx where fx should be replaced by the function you want. Note that there is some nuance to this that we will talk about with modules later.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Finally, if you want to remove Plots, just use the rm or remove command like so:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg> rm Plots","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"or","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg> remove Plots","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Note that if you do not want to use the REPL to do this any of this, you can do so by first using Pkg and then doing all the commands in the package mode of the REPL with the Pkg package. For the Plots example above, this might look like:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"using Pkg\nPkg.add(\"Plots\")\nusing Plots","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Also keep in mind that this particular version of Plots.jl will be pulled from a giant repository of all available Julia packages called a Registry.[^In particular the Julia Registry here: https://github.com/JuliaRegistries/General] We'll talk more about that in a bit as well.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"But wait. What if your friend wants to run your code, but forgot to install Plots first? Well, in that case, Julia will show an error message like so:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"ADD  ERROR V 1.9","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"It will then prompt your friend to install the appropriate package.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"But there's actually another way to make sure your friend is using not only the right packages, but the right package versions as well, and that's by creating your own package and sending that instead. Each package is generally specified as a project and the next few sections will talk about them in detail.","category":"page"},{"location":"content/packages/#What-is-a-project?","page":"Package Management in Julia","title":"What is a project?","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"A project in Julia is anything set of coding scripts you are working on that need to work cohesively together. The specific set of packages you need to get your code to run is available in the Project.toml file, which will be in the root (home) directory of your codebase.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So let's see this in action. First, let's generate a new package from the REPL by first pressing the ] key:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(@v1.X) pkg> generate NewPackage.jl\n  Generating  project NewPackage:\n    NewPackage.jl/Project.toml\n    NewPackage.jl/src/NewPackage.jl","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Here, we see that a new directory has been created with the name NewPackage.jl along with a Project.toml file and a new directory and file src/NewPackage.jl Note that the .jl extension is not strictly necessary, but is common practice for julia package development. At least for me, I typically use the .jl extension if I am writing code meant to be used by other people, but leave it off for my own scripts that are not intended for public use.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now let's look into each file, starting with Project.toml:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cat NewPackage.jl/Project.toml \nname = \"NewPackage\"\nuuid = \"6c3339cd-44b7-4b24-89b3-44aad60a1695\"\nauthors = [\"James Schloss <jrs.schloss@gmail.com>\"]\nversion = \"0.1.0\"","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Ok, lot's to talk about:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cat is a terminal command that just shows the content of a file. Don't worry about it too much, I just showed the command for clarity.\nname is the name you provided for the package. Note that the .jl extension is stripped in the actual package name.\nThe uuid is a \"Universally Unique Identifier\" and will be different for each person. uuid values are used a bunch throughout different areas of software engineering, but here they are used to differentiate packages, that way if two packages have the same name, they can still be uniquely identified [^ Note that there are some caveats here that we will talk about when discussing registering a package].\nauthors are the authors in the format typically used for git (and specifically github). Feel free to add new authors to this as necessary. And yes, that is my actual email. Feel free to send me a message if you want!\nversion is the version for your package and is set to 0.1.0 by default. This will be discussed in it's own section below.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now let's see what's in the other new file:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cat NewPackage.jl/src/NewPackage.jl \nmodule NewPackage\n\ngreet() = print(\"Hello World!\")\n\nend # module","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This is actually just a julia file with a basic \"Hello World!\" script. There is not too much to say except that it is creating a module with a single component, the greet() function. So how do we call this function?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"The simplest way is to just include the file directly into the Julia REPL:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"julia> include(\"NewPackage.jl/src/NewPackage.jl\")\nMain.NewPackage\njulia> NewPackage.greet()\nHello World!","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"The second way is to start Julia up with this specific project so we can use it like any other package:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cd NewPackage.jl/\njulia --project\njulia> using NewPackage\n[ Info: Precompiling NewPackage [6c3339cd-44b7-4b24-89b3-44aad60a1695]\n\njulia> NewPackage.greet()\nHello World!","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"A couple things to note:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"In the first method (just includeing the file, we are treating the package as a single file and otherwise using whatever packages we already have installed on our system.\nIn the second method, we are launching julia with the --project flag, which uses the packages in the Project.toml file. Right now, that file has no dependencies, but we'll talk about that in a second. To use this flag, you must specify where the project is located, which is in the current directory by default, but you could also use julia --project=/path/to/Project.toml.\nWhen using NewPackage, there is a small delay where Julia precompiles not only the package, itself, but also any other necessary packages and functions.\nFinally, to call the greet() function, we need to call it from the module with NewPackage.greet().","category":"page"},{"location":"content/packages/#Adding-packages-to-your-Project.toml","page":"Package Management in Julia","title":"Adding packages to your Project.toml","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Ok, let's keep going within the project that we created before (with julia --project). What if our package needs some other package to work properly, how might we do this?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well let's start by pressing ] in the REPL. Now you should see this:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg>","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Immediately there is a subtle, but important difference: The pkg> prompt has (NewPackage) in parenthesis before it. This means that the package manager will be directly modifying NewPackage.jl's Project.toml, but keep everything else clean. So now let's att Plots like before:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> add Plots\n    Updating registry at `~/.julia/registries/General`\n    Updating git-repo `https://github.com/JuliaRegistries/General.git`\n   Resolving package versions...\n   Installed GR_jll ──────────────────── v0.72.9+1\n   ...\n   Installed UnitfulLatexify ─────────── v1.6.3\n  Downloaded artifact: GR\n  ...\n  Downloaded artifact: Xorg_libXdmcp\n    Updating `~/projects/stuff/NewPackage.jl/Project.toml`\n  [91a5bcdd] + Plots v1.39.0\n    Updating `~/projects/stuff/NewPackage.jl/Manifest.toml`\n  [d1d4a3ce] + BitFlags v0.1.7\n  ...\n  [3f19e933] + p7zip_jll\nPrecompiling project...\n  ✓ NewPackage\n  114 dependencies successfully precompiled in 163 seconds (26 already precompiled)\n  1 dependency precompiled but a different version is currently loaded. Restart julia to access the new version","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"What a nightmare! The truth is that Plotting is actually kinda complicated and there is a lot going on, so let me try to break it down:","category":"page"},{"location":"content/packages/#Step-1:-Updating-the-registry","page":"Package Management in Julia","title":"Step 1: Updating the registry","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"    Updating registry at `~/.julia/registries/General`\n    Updating git-repo `https://github.com/JuliaRegistries/General.git`","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This is doing what is says, updating your local versions of the Julia registry to make sure it's up-to-date.","category":"page"},{"location":"content/packages/#Step-2:-Installing-necessary-packages","page":"Package Management in Julia","title":"Step 2: Installing necessary packages","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"   Installed GR_jll ──────────────────── v0.72.9+1\n   ...\n   Installed UnitfulLatexify ─────────── v1.6.3","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"All of these are downloading the necessary dependencies for Plots","category":"page"},{"location":"content/packages/#Step-3:-Downloading-artifacts","page":"Package Management in Julia","title":"Step 3: Downloading artifacts","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"  Downloaded artifact: GR\n  ...\n  Downloaded artifact: Xorg_libXdmcp","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"artifacts are anything Packages need that are not packages themselves. Plots.jl uses a lot of these becuase it needs to do a lot of semi-complicated things, like opening up windows on your local system, which could be operating-system dependent.","category":"page"},{"location":"content/packages/#Step-4:-Updating-Project.toml-and-Manifest.toml","page":"Package Management in Julia","title":"Step 4: Updating Project.toml and Manifest.toml","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"    Updating `~/projects/stuff/NewPackage.jl/Project.toml`\n  [91a5bcdd] + Plots v1.39.0\n    Updating `~/projects/stuff/NewPackage.jl/Manifest.toml`","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now we are finally updating the Project.toml file with Plots, but also creating a new file called a Manifest.toml. We'll cover this file more in a bit, but it's essentially a list of all the packages you need and their dependencies along with their unique identifiers and versions. It is automatically generated and you generally don't need to think about it too much.","category":"page"},{"location":"content/packages/#Step-5:-Precompilation-of-the-full-project","page":"Package Management in Julia","title":"Step 5: Precompilation of the full project","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Precompiling project...\n  ✓ NewPackage\n  114 dependencies successfully precompiled in 163 seconds (26 already precompil\ned)\n  1 dependency precompiled but a different version is currently loaded. Restart \njulia to access the new version","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Finally, we are precompiling our NewProject to make sure that adding the new package doesn't mess up any of the functionality we already have. Once done, it says that there are 114 dependencies precompiled and 1 precompiled with a different version. That isn't a huge deal in most cases, but if you notice things acting funny later, you might want to restart Julia.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"From now on, any time you load the NewPackage project, you will have Plots ready to go with just using Plots. It will automatically load a version that works well with your project.","category":"page"},{"location":"content/packages/#What-happened-to-the-Project.toml-file?","page":"Package Management in Julia","title":"What happened to the Project.toml file?","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So at this point, we have taken a look at what happens when we add a package to a specific project, but how are these changes actually reflected in the project, itself? More specifically, if I were to give a friend this Julia project, how can I be sure that they can install the right packages?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well, the changes will be reflected in the Project.toml file:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cat Project.toml \nname = \"NewPackage\"\nuuid = \"6c3339cd-44b7-4b24-89b3-44aad60a1695\"\nauthors = [\"James Schloss <jrs.schloss@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nPlots = \"91a5bcdd-55d7-5caf-9e0b-520d859cae80\"\n","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"As you can see, there is now a new section called [deps] which lists out all of the \"dependencies\" (software necessary for the project to run. In general, as long as you pass the Project.toml file along with the rest of the code, people can install all the necessary packages by doing:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"julia --project=.\n] # to enter package mode in the REPL\n(NewPackage) pkg> instantiate","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"where instantiate is the command used to create a working instance of the project by installing all the necessary software.","category":"page"},{"location":"content/packages/#What-about-the-Manifest.toml?","page":"Package Management in Julia","title":"What about the Manifest.toml?","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Note: CHECK FOR V1.9!!!","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now let's touch on the other file, the Manifest.toml. When we used the add Plots command, Julia installed not only Plots, but also all the other necessary software for Plots to run, including several non-Julia blobs known as artifacts. From the user's perspective, the only piece of software they care about is Plots, but it would be helpful to keep track of all these other bits and bobs. That's where the Manifest.toml file comes in. It's just a list of every package and all of their dependencies.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"In short, the Project.toml file is a user-generated short-list of necessary packages, while the Manifest.toml is a computer generated long-list of everything else. We will not inspect this file too deeply because, well:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"wc Manifest.toml \n  913  2409 31541 Manifest.toml","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"The file already has 900 lines of code! For those who don't know, the wc command stands for wc and will just show how many lines, words, and characters each file has.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"For now, let's just look at where Plots is specified:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"[[deps.Plots]]\ndeps = [\"Base64\", \"Contour\", \"Dates\", \"Downloads\", \"FFMPEG\", \"FixedPointNumbers\"\n, \"GR\", \"JLFzf\", \"JSON\", \"LaTeXStrings\", \"Latexify\", \"LinearAlgebra\", \"Measures\"\n, \"NaNMath\", \"Pkg\", \"PlotThemes\", \"PlotUtils\", \"Preferences\", \"Printf\", \"REPL\", \n\"Random\", \"RecipesBase\", \"RecipesPipeline\", \"Reexport\", \"RelocatableFolders\", \"R\nequires\", \"Scratch\", \"Showoff\", \"SnoopPrecompile\", \"SparseArrays\", \"Statistics\",\n \"StatsBase\", \"UUIDs\", \"UnicodeFun\", \"Unzip\"]\ngit-tree-sha1 = \"513084afca53c9af3491c94224997768b9af37e8\"\nrepo-rev = \"v1.39.0\"\nrepo-url = \"https://github.com/JuliaPlots/Plots.jl.git\"\nuuid = \"91a5bcdd-55d7-5caf-9e0b-520d859cae80\"\nversion = \"1.39.0\"","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Here, we see a short-hand version of the Project.toml for Plots, along with all of it's dependencies. The deps.Plots notation can be read as \"dependencies for Plots.\" We can also look into any one of these dependencies in the Manifest.toml file to see how it works on your own machine.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"It's actually kinda interesting to see what pieces of software Plots and Julia pulls in to get everything working on your own system, so I might recommend just looking at the file in depth for fun. But to be honest, only for fun.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Otherwise this file is completely computer generated and can probably be ignored. In fact, if you are using git, I would suggest adding the Manifest.toml to your .gitignore file so you don't accidentally commit it.","category":"page"},{"location":"content/packages/#What-if-I-don't-want-to-use-the-REPL?","page":"Package Management in Julia","title":"What if I don't want to use the REPL?","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So there are some instances where you don't have the Julia REPL immediately available (we'll definitely talk about these instances later). In these cases, you can load the Pkg package and use all the same commands as if you were calling a function from that module. For example:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"using Pkg\nPkg.status()","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Just remember that in this case, the commands will be functions and will take function arguments, so you need to add parentheses (()) and treat any function arguments as Julia data structures (probably strings). So add would look like:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"using Pkg\nPkg.add(\"Plots\")","category":"page"},{"location":"content/packages/#Wrap-up","page":"Package Management in Julia","title":"Wrap-up","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Ok, that was a lot. At this stage, we have talked about how to use basic packages and add them to basic projects, but there are lots of little things to talk about. Let's tackle them one at a time.","category":"page"},{"location":"content/packages/#The-status-command","page":"Package Management in Julia","title":"The status command","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"In the previous example, we added a new package called Plots to an existing project called NewProject. That's all well and good, but Julia is an actively developed langauge and packages could change. What if there is an issue with your, specific version of Plots and you want to go back to a previous version? How would you even figure out such a thing?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well, you can do so by looking at your status or st:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> st\n     Project NewPackage v0.1.0\n      Status `~/projects/stuff/NewPackage.jl/Project.toml`\n  [91a5bcdd] Plots v1.39.0","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Here, it shows that we are using NewPackage v0.1.0 and Plots v1.39.0, as specified in our Project.toml Now that we know our package versions we can play around with them.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"!!! note On semantic versioning     Julia uses Semantic Versioning, which means that there are 3 numbers associated with each version one for major changes, minor changes, and patches.     For example, v1.2.3 would be on major version 1, minor version 2, and patch version 3.     These version numbers are incredibly useful for ensuring that results from code can be replicated by other users.     After all, two users could get radically different results if there were radical changes between package versions.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"By standardizing on semantic versioning, Julia can ensure the package manager can maintain a clear concept of which packages depend on each other and which versions of those packages are necessary to provide correct results.\nSo for example, let's say that package A requires package B to be at v1.3.4 or older.\nIf you install package A, the package manager will automatically lower the version of package B to 1.3.4 or older.","category":"page"},{"location":"content/packages/#Lowering-the-package-version","page":"Package Management in Julia","title":"Lowering the package version","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Following the discussion from above, let's say we want to lower the version of Plots for our NewPackage. This is as simple as:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"] # to enter package mode in the REPL\n(NewPackage) pkg> add Plots#v1.38.0","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"It is exactly the same as the previous add command, but with a #v1.38.0 added to it. You can put down any version number you like instead.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"But for now, I want to take a look at the output:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"     Cloning git-repo `https://github.com/JuliaPlots/Plots.jl.git`\n    Updating registry at `~/.julia/registries/General`\n    Updating git-repo `https://github.com/JuliaRegistries/General.git`\n   Resolving package versions...\n   Installed GR_jll ─────── v0.71.8+0\n   Installed Latexify ───── v0.15.21\n   Installed ColorSchemes ─ v3.24.0\n   Installed GR ─────────── v0.71.8\n  Downloaded artifact: GR\n","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"All of this is the same as before, but you might notice some of the version numbers are different. From here, we see some clear changes:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"    Updating `~/projects/stuff/NewPackage.jl/Project.toml`\n  [91a5bcdd] ~ Plots v1.39.0 ⇒ v1.38.0 `https://github.com/JuliaPlots/Plots.jl.git#v1.38.0`\n    Updating `~/projects/stuff/NewPackage.jl/Manifest.toml`\n  [35d6a980] ↑ ColorSchemes v3.23.0 ⇒ v3.24.0\n  [187b0558] - ConstructionBase v1.5.4\n  [28b8d3ca] ↓ GR v0.72.9 ⇒ v0.71.8\n  [23fbe1c1] ↓ Latexify v0.16.1 ⇒ v0.15.21\n  [91a5bcdd] ~ Plots v1.39.0 ⇒ v1.38.0 `https://github.com/JuliaPlots/Plots.jl.git#v1.38.0`\n  [66db9d55] + SnoopPrecompile v1.0.3\n  [2913bbd2] ↓ StatsBase v0.34.0 ⇒ v0.33.21\n  [1986cc42] - Unitful v1.17.0\n  [45397f5d] - UnitfulLatexify v1.6.3\n  [d2c73de3] ↓ GR_jll v0.72.9+1 ⇒ v0.71.8+0\n  [89763e89] ↓ Libtiff_jll v4.5.1+1 ⇒ v4.4.0+0\n  [ea2cea3b] + Qt5Base_jll v5.15.3+2\n  [c0090381] - Qt6Base_jll v6.4.2+3\n  [ffd25f8a] - XZ_jll v5.4.4+0","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"A bunch of things are happening:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"A single package has been upgraded (marked in yellow with a ↑ arrow)\nMany packages have been downgraded (marked in purple with ↓ arrows)\nSeveral packages have been removed (marked in red with a - sign)\nA few packages have been added (marked in green with a + sign)","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Note two important things:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"The only change to the Project.toml is the change of Plots version number.\nAll the other changes are indirect and stored in the Manifest.toml file instead.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"After this, the project precompiles like normal:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Precompiling project...\n  9 dependencies successfully precompiled in 96 seconds (128 already precompiled)","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"My point here is that downgrading a package is easy syntactically (it's just an add command), but there is a lot going on behind the scenes. In fact, it's relatively easy to use any development branch of any package. Let's show that off next.","category":"page"},{"location":"content/packages/#Using-a-specific-git-branch","page":"Package Management in Julia","title":"Using a specific git branch","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So let's imagine there is some new feature to the Plots package that you really want to use immediately. Unfortunately, this feature is only in the primary development branch (usually either master or main). What do you do?","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Well, you can just add it like so:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> add Plots#master","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This will do the same procedure as before and update your local files so that they point to the master branch. In fact, you could do this same thing for any commit hash or branch, not just master or main.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"But what if your friend made their own version of Plots and really wants to use that instead? Ok, no problem, just use the url:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> add https://github.com/Friend/Plots.jl","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Here, you would need to replace the link with whatever link your friend has been using for development. If it's on github, you can probably just replace Friend with your friend's github ID.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This leads us to the next topic, developing local packages.","category":"page"},{"location":"content/packages/#Using-packages-outside-of-the-Julia-Registry","page":"Package Management in Julia","title":"Using packages outside of the Julia Registry","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"If you have decided to create a project for yourself, you will probably be storing that project in some git repository somewhere. Though at some point you might want to put the package in the official Julia registry, there is no real requirement to do so. In fact, there are a bunch of packages that exist outside of the official Julia registry for some reason or another. to use one of these packages, just do what we did above and add the project with the development url:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> add URL","category":"page"},{"location":"content/packages/#Developing-local-packages","page":"Package Management in Julia","title":"Developing local packages","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Ok, but what if you want to make changes to Plots, how would you do that? One easy way is to download the repo onto your own machine and do development on your own fork (before creating a pull request with the changes to the official repository).","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"So let's show off how to do that (starting from the NewPackage.jl source / root directory)","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cd ../\ngit clone git clone ","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"This will get a version of Plots.jl on your local computer. Feel free to do whatever you want to it. Note that you could also have used the ssh or git link as well (git@github.com:JuliaPlots/Plots.jl.git).","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Once this is done, we can go back to the NewPackage.jl directory and enter the Julia project:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"cd NewPackage.jl\njulia --project=.","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now we need to tell Julia that we will be developing Plots locally with the dev command:","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"] # to enter package mode in the REPL\n(NewPackage) pkg> dev ../Plots.jl/","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Now let's take a look at our status","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"(NewPackage) pkg> st\n     Project NewPackage v0.1.0\n      Status `~/projects/stuff/NewPackage.jl/Project.toml`\n  [91a5bcdd] Plots v1.39.0-dev `../Plots.jl`","category":"page"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Plots is now at v1.39.0-dev and points to ../Plots.jl, our local directory. Now any change we make there will be reflected in the NewPackage.jl project.","category":"page"},{"location":"content/packages/#Adding-compatability-versions-for-specific-packages","page":"Package Management in Julia","title":"Adding compatability versions for specific packages","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"At this point, we have a clear idea of how important the Project.toml file is for each Julia project (or package); however, until now we have been completely relying on the package manager to make any changes. The truth is that there are several reasons why you might want to update the file manually instead.","category":"page"},{"location":"content/packages/#compat","page":"Package Management in Julia","title":"compat","text":"","category":"section"},{"location":"content/packages/#Status-conflicts","page":"Package Management in Julia","title":"Status conflicts","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Limit Plots version in one package and then use a second package to show a few more conflicts.","category":"page"},{"location":"content/packages/#Registering-a-package","page":"Package Management in Julia","title":"Registering a package","text":"","category":"section"},{"location":"content/packages/#Creating-your-own-Registry","page":"Package Management in Julia","title":"Creating your own Registry","text":"","category":"section"},{"location":"content/packages/#Manifests","page":"Package Management in Julia","title":"Manifests","text":"","category":"section"},{"location":"content/packages/#build-command","page":"Package Management in Julia","title":"build command","text":"","category":"section"},{"location":"content/packages/#Instantiation","page":"Package Management in Julia","title":"Instantiation","text":"","category":"section"},{"location":"content/packages/","page":"Package Management in Julia","title":"Package Management in Julia","text":"Ok, that's a little too much information on package management for now. There is a lot left to cover, including testing, documentation, etc, but that will all be covered in the development section.","category":"page"},{"location":"content/about_me/#About-the-Author","page":"About the Author","title":"About the Author","text":"","category":"section"},{"location":"content/about_me/","page":"About the Author","title":"About the Author","text":"I am Dr. James Schloss. I received my PhD in 2019 from the Okinawa Institute of Science and Technology Graduate University (OIST). While there, I studied quantum systems by simulating them with my Graphics Processing Unit (GPU). During that time, my roommate (who will remain unnamed) became a core developer of the Julia language. So I tried it out and was (admittedly) a little lukewarm about the language. Throughout the next few years, the language evolved and Julia slowly became more and more important in my daily life. It started as a Python replacement. Then a C replacement. Eventually, it even became a replacement for CUDA (the interface I was using to do almost all of my research). Since then, I have been working off and on in the Julia Lab at MIT (a very prominent research arm of the Julia programming language), where I have worked on various scientific computing projects such as climate and molecular simulations.","category":"page"},{"location":"content/about_me/","page":"About the Author","title":"About the Author","text":"I also run the (relatively) popular youtube channel and twitch stream Leios Labs, where we have been developing a book for uncommon algorithms known as the Arcane Algorithm Archive. Some of the chapters in this book were inspired by that work. I have also worked with Grant Sanderson (3Blue1Brown) on several projects, including the Summer of Math Exposition, where we encouraged thousands of online content creators to make more math content online.","category":"page"},{"location":"content/about_me/","page":"About the Author","title":"About the Author","text":"I have always said, \"Your research is only as good as your ability to communicate it.\"","category":"page"},{"location":"content/about_me/","page":"About the Author","title":"About the Author","text":"This book is my attempt to provide core elements of my research and the language I typically use to do that research for everyone to read and learn from.","category":"page"},{"location":"content/about_me/#Prominent-Reviewers","page":"About the Author","title":"Prominent Reviewers","text":"","category":"section"},{"location":"content/about_me/","page":"About the Author","title":"About the Author","text":"Any academic work is only as good as the peers who read and critique it. For that reason, I intend to keep a list of \"Prominent Reviewers\" who don't mind putting their name in this section. This should be a list of academics or core community members who have either been asked to review the work due to their expertise or have contributed significantly in the beta reading phase.","category":"page"},{"location":"content/performance/#Who-is-Julia?","page":"Who is Julia?","title":"Who is Julia?","text":"","category":"section"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Ok, look. If you are reading this book, you hopefully have realized by now that Julia is not a person, but instead a dynamic programming language full of unique and interesting features. However, I think every single Julia programmer has gotten the question, \"Who is Julia?\" by some cheeky student. Even Google used to get this confused. Back in the day when you searched for Julia lang (short for Julia language), you would get results for the Julia language as you might have hoped for, but you would also get the results of a rather popular woman named Julia Lang.","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"But let's stop talking about the \"who\" and start with the \"what\". How do we actually answer the question of \"What is Julia?\" It is surprisingly tricky to answer.","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Many Julia programmers choose to say that \"Julia is a high-performant language focused on usability. It is (in principle) just as easy to use as Python, and as fast as C.\" It is succinct and gets the point across, but is it accurate? Well, kinda.","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Other people claim that Julia is a straight-up solution to the \"two language problem\" where data scientists often write their code in an easy language like Python or Matlab, which end up calling libraries ultimately written in a more performant language like C. Because Julia is both performant and easy to use, there is no longer a need for two separate languages when one could do. But to be honest, is the two language problem really a problem? It just means that the front-end of most C code is actually python.","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"So let's discuss these claims im more detail.","category":"page"},{"location":"content/performance/#What-is-the-two-language-problem","page":"Who is Julia?","title":"What is the two language problem","text":"","category":"section"},{"location":"content/performance/#Is-Julia-actually-as-easy-to-use-as-Python?","page":"Who is Julia?","title":"Is Julia actually as easy to use as Python?","text":"","category":"section"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"python's power comes in it's utility. It can do anything. Julia can not.","category":"page"},{"location":"content/performance/#Is-Julia-actually-as-fast-as-C?","page":"Who is Julia?","title":"Is Julia actually as fast as C?","text":"","category":"section"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Mention precompilation","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"ADD MORE, MAYBE MOVE TO INDEX / INTRO?","category":"page"},{"location":"content/performance/#A-Note-on-Julia's-performance","page":"Who is Julia?","title":"A Note on Julia's performance","text":"","category":"section"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"At this point in the story, it is worth discussion Julia's overall performance – in particular, how it compares to many other programming languages like C, python, or matlab. The fact is that this is a bit of a mixed bag.","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"...","category":"page"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Basically, as long as you write your code in a function and make sure not to pull any variables from the global scope, you can be sure Julia will be relatively fast","category":"page"},{"location":"content/performance/#Just-things-to-keep-in-mind","page":"Who is Julia?","title":"Just things to keep in mind","text":"","category":"section"},{"location":"content/performance/#Scoping-of-variables","page":"Who is Julia?","title":"Scoping of variables","text":"","category":"section"},{"location":"content/performance/","page":"Who is Julia?","title":"Who is Julia?","text":"Don't use variables out of their scope","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Notes: Add example problems?","category":"page"},{"location":"content/syntax/#General-Julia-Syntax","page":"General Julia Syntax","title":"General Julia Syntax","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"There are certain \"building blocks\" of code that almost every language provides to it's users: loops, conditionals (if...else if...else), functions, structs (or classes). These are fundamental to how users interface with code and reason about problems. When languages do not provide such features, they are often labelled as esoteric because they usually require fundamentally different approaches to certain problems. Luckily, Julia is not an esoteric language. It provides everything a modern programmer might want (and more)!","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"In particular, Julia provides a really robust type system that pairs well with struct definitions. It also provides broadcasting operations, which create custom element-wise operations.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"In this chapter, we will start with the simplest programming structures and build towards the more complex.","category":"page"},{"location":"content/syntax/#Printing","page":"General Julia Syntax","title":"Printing","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"The first thing many people do when learning a new programming language is a simple \"Hello World!\" program. In Julia, it's:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"print(\"Hello World!\")","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"The word \"print\" here more accurately means \"output the provided set of characters to the terminal.\" The set of characters \"Hello world\" is specified as a String with double quotation marks, while a single character can be specified with single quotes (such as 'a'). In Julia, it is more common to print both a string and a new line together with the \"print line\" command:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"println(\"Hello World!\")","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Which does the same thing, but also moves the terminal position one line forward.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"If you are used to C-style printing, you can use @printf (and @sprintf if you want a string instead of directly outputting to the terminal) by first using Printf. The syntax will not be fully covered here, but here are a few quick examples:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Using Printf\n@printf(\"Hello %s\", \"World!\")","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"This creates a string and then replaces the %s with the string that comes after it, in this case, \"World!\". Note that the %s format is specifically for strings, but you could use any of the following:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"| – | –- | | Example format | replaced with ... | | – | –- | | %s | String value | | %.3e | number using scientific notation with 3 significant digits | | %.2f | floating point number with 2 decimal digits | | %.5i | number padded with an empty space \" \" for formatting | | %0.5i | number padded with a 0 | | %.6g | removes trailing zeros from an output number |","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Again, it's probably best to stick to just ptint or println, but some for the sticklers who want it or for those who might need some other tooling, printf also exists.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Ok, now to cover a few more bits and bobs, like warnings and some quick notes on strings, themselves.","category":"page"},{"location":"content/syntax/#Warnings,-errors,-and-info-statements.","page":"General Julia Syntax","title":"Warnings, errors, and info statements.","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Julia provides special types of printing for specific messages that you feel the user should really pay attention to. These will provide a colored output in the terminal, and have slightly different functionalities and meanings.","category":"page"},{"location":"content/syntax/#Errors","page":"General Julia Syntax","title":"Errors","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"When you call error(...) in Julia, it will stop the execution of the program and output a red error message along with the stacktrace (list of all functions leading to the error in the first place) so you can get some context. For example:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"julia> error(\"You did something wrong!\")\nERROR: You did something wrong!\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] top-level scope\n   @ REPL[11]:1","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Here, the stacktrace just has the error message and the REPL, as it was directly written in the REPL instead of inside of a function. We will talk more about understanding stack traces later.","category":"page"},{"location":"content/syntax/#Warnings","page":"General Julia Syntax","title":"Warnings","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Warnings are less destructive error messages. They still let the user know that something could be going wrong, but will allow the program to procees without quitting it prematurely. For example:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"@warn(\"You might be doing something wrong...\")\n┌ Warning: You might be doing something wrong...\n└ @ Main REPL[12]:1","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"The warning is colored in yellow. Instead of outputting an entire stacktrace, it will let the user know the line number and file where the warning was written. Again because this was done in the REPL, it simply states so.","category":"page"},{"location":"content/syntax/#Info-statements","page":"General Julia Syntax","title":"Info statements","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Finally, there are info statements. These are not warning or errors, but let the user know about something they might not have before.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"julia> @info(\"Hey, just letting you know...\")\n[ Info: Hey, just letting you know...","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Info statements are colored in blue and do not print any sort of line number.","category":"page"},{"location":"content/syntax/#A-brief-note-on-Strings","page":"General Julia Syntax","title":"A brief note on Strings","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Strings are essential to outputting information in Julia (and most programming languages). To be honest, there is not too much to say about them except that:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"They are signified with double quotes (\"this is a string.\")\nIndividual characters are signified with single quotes ('a')\nTo concatenate (add together) two strings, use the * operator like so: `\"Hello \"*\"World!\"","category":"page"},{"location":"content/syntax/#Conditionals","page":"General Julia Syntax","title":"Conditionals","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Conditionals are simply ways to say, \"If this is true, do this, if not, do something else.\" This necessarily relies on some boolean true / false value to determine which branch you want to go down. So let's say you have a value a and want to do domething different if a is negative, between 0 and 1, or greater than 1. In Julia, that statement might look something like this:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"if a < 0\n    println(\"a is negative\")\nelseif 0 <= a <= 1\n    println(\"a is between 0 and 1\")\nelseif a > 1\n    println(\"a greater than 1\")\nelse\n    error(\"Something broke\")\nend","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"In this case, it is evaluating 3 separate expressions to determine if any are true:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"a < 0\n0 <= a <= 1\na > 1","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"If none are true, it then proceeds to the else statement.","category":"page"},{"location":"content/syntax/#Ternary-operator","page":"General Julia Syntax","title":"Ternary operator","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Julia also supports the usage of the ternary operator syntax for simple conditionals with a single boolean statement. Following the example from above, if we have a variable a and want to see if it is negative, we might write a ternary operator like so:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"a < 0 ? println(\"a is negative\") : println(\"a is positive\")","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Here, the conditional comes first, followed by a question mark (?). In this case, the conditional is a < 0. If the conditional is true, then the program will execute the first option before the colon (:), which is println(\"a is negative\") in this case. If the conditional is false, the program will execute the second option after the colon (:), which is println(\"a is positive\") in this case.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"To be honest, I am personally torn on ternary usage. There are certain casses where it can certainly be useful and will help clean up code; however, if the operator becomes greater than a line or two, it is more convenient to just write the if / else block.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Both of these operations boil down to the same code, so there is no performance reason to choose one over another for most cases. So just be careful and always try to write code that is easy for others to understand.","category":"page"},{"location":"content/syntax/#Logical-operations-and-expressions","page":"General Julia Syntax","title":"Logical operations and expressions","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"When it comes to conditionals, it's really important to flexibly write whatever expression you might need to evaluate as true or false. Luckily, most of these expressions have very clear logic that can be understood from conversational language.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"|–-|–-| | Expression | Meaning | |–-|–-| | > | Greater than | | < | Less than | | >= | Greater than or equal to | | <= | Less than or equal to | | == | Equal to | | != | Not equal to |","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"As all of these operations will create a boolean value and we are ultimately evaluating a boolean, there are conditional versions of boolean operators, for example:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"|–-|–-| | Operation | Meaning | |–-|–-| | ! | Not | | && | And | | || | Or |","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"It is also totally fine to use the real boolean operators, like & and |, but what exactly is the difference between && and &? What's the point in using the same symbol twice? Well, the && and || operators are technically known as \"short circuit\" operators that will only evaluate the second argument if necessary. For example:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"isa(a, Number) && a < 0","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Would first evaluate if a is a Number and then evaluate a < 0 only if the first conditional is true. ADD BETTER EXAMPLE: I am introducing types too early ALSO ADD OR EXAMPLE","category":"page"},{"location":"content/syntax/#Common-Data-Structures","page":"General Julia Syntax","title":"Common Data Structures","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"In basically any programming language, there is some way to collect data into a single structure. There are many such structures in Julia and ","category":"page"},{"location":"content/syntax/#Arrays","page":"General Julia Syntax","title":"Arrays","text":"","category":"section"},{"location":"content/syntax/#Notes-on-types","page":"General Julia Syntax","title":"Notes on types","text":"","category":"section"},{"location":"content/syntax/#Tuples","page":"General Julia Syntax","title":"Tuples","text":"","category":"section"},{"location":"content/syntax/#Dictionaries","page":"General Julia Syntax","title":"Dictionaries","text":"","category":"section"},{"location":"content/syntax/#Stacks-and-Queues","page":"General Julia Syntax","title":"Stacks and Queues","text":"","category":"section"},{"location":"content/syntax/#Loops","page":"General Julia Syntax","title":"Loops","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"There is an old addage, \"Insanity is doing the same thing over and over again and hoping for a different result.\"[^This idea is often attributed to Eindtein, but to be honest, I couldn't find conclusive evidence of Einstein ever saying something like it.] This is a ridiculous claim. Every day, we do the same things over and over for many different reasons.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Why? Well, for many reasons...","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"We could be practicing or refining certain skills.\nWe could be building something that is made of a bunch of small steps.\nWe could be going through a list of items to check their quality.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"No matter the case, doing the same thing over and over again is called iteration and it's not a sign of insanity, but a core component to how we think and reason about the world. As such, Julia provides the ability to iterate through loops, which are common constructs that execute a block of code and the loop back to the start of the block again and again until a certain condition is met.","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"As an important point (for those migrating from languages like Matlab), looping does not come with any sort of performance penalty in Julia. Remember that Julia boils down to the same code representation as C, so such basic programming constructs will have similar performance. So don't be afraid, loop to your heart's content![^ Your heart beating is also a form of iteration, but I digress...]","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"I'll now introduce the two primary looping constructs: for and while.","category":"page"},{"location":"content/syntax/#while-loops","page":"General Julia Syntax","title":"while loops","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"These loops just keep going until a conditional is false. So, as a quick example, let's say you want to move a ball forward until it hits a wall. You might write something like:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"ball_position = 0.0\nwall_position = 10.0\nstep_size = 1.0\n\nwhile ball_position < wall_position\n    ball_position += step_size\nend","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Here, the ball_position, wall_position, and step_size were all arbitrarily chosen. Note that while loops might not continue going on forever unless the conditional is evaluated as false. Because of this, each while loop should address the conditional in the loop, itself. In this case, because the ball_position must be greater than the wall_position for the loop to terminater, we are adding step_size to it every iteration.","category":"page"},{"location":"content/syntax/#for-loops","page":"General Julia Syntax","title":"for loops","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Unlike while loops, for loops will iterate through some iterable object like a list or range of numbers. To be honest, I usually like splitting this up into two different types of looping:","category":"page"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Looping through a range of numbers\nLooping through a collection of items","category":"page"},{"location":"content/syntax/#Looping-through-a-range-of-numbers","page":"General Julia Syntax","title":"Looping through a range of numbers","text":"","category":"section"},{"location":"content/syntax/#Looping-through-a-collection-of-items","page":"General Julia Syntax","title":"Looping through a collection of items","text":"","category":"section"},{"location":"content/syntax/#include()","page":"General Julia Syntax","title":"include()","text":"","category":"section"},{"location":"content/syntax/#Types-(and-supertypes)","page":"General Julia Syntax","title":"Types (and supertypes)","text":"","category":"section"},{"location":"content/syntax/#Structs","page":"General Julia Syntax","title":"Structs","text":"","category":"section"},{"location":"content/syntax/#Functions","page":"General Julia Syntax","title":"Functions","text":"","category":"section"},{"location":"content/syntax/","page":"General Julia Syntax","title":"General Julia Syntax","text":"Also cover ! Multiple dispatch","category":"page"},{"location":"content/syntax/#Broadcasting","page":"General Julia Syntax","title":"Broadcasting","text":"","category":"section"},{"location":"content/syntax/#macros","page":"General Julia Syntax","title":"macros","text":"","category":"section"},{"location":"content/llvm/#What-is-precompilation?","page":"What is precompilation?","title":"What is precompilation?","text":"","category":"section"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"So your friend got you into Julia and claimed that it was \"Just as fast as C, but as easy to use as python.\" You then looked at the syntax and thought, \"Ok. It's fine syntactically, but nothing spectacular.\" You then decided to run a simple test to check the performance of your Julia code and wrote the following code in C:","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"#include<iostream>\n\nint main()\n    std::cout << \"Hello world!\" << std::endl;\nend","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"to compare to Julia's:","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"println(\"Hello world!\")","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"You then ran a simple time command in the terminal, only to find that Julia is, well, leagues slower than C. You then might think to yourself, \"Ah, ok. Maybe that's all compilation time and the runtime of C and Julia are actually the same.\" In an attempt to get your bearings, you then also decide to test against a simlar script in python:","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"print(\"Hello world!\")","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"Only to find that Julia is actually slower than python! So what gives? Why was your friend lying to you?","category":"page"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"This is one of those little white lies that Julia users tell all the time. Precompilation can be the slowest part of your code, sometimes by a mile!","category":"page"},{"location":"content/llvm/#Can-we-just-talk-about-LLVM?","page":"What is precompilation?","title":"Can we just talk about LLVM?","text":"","category":"section"},{"location":"content/llvm/","page":"What is precompilation?","title":"What is precompilation?","text":"So we say that all julia code compiles down to LLVM just like C, but what does that actually mean?","category":"page"},{"location":"content/debug/#Debugging-Julia","page":"Debugging Julia","title":"Debugging Julia","text":"","category":"section"},{"location":"content/debug/#@edit","page":"Debugging Julia","title":"@edit","text":"","category":"section"},{"location":"content/debug/#@code*lowered,-@code*warntype","page":"Debugging Julia","title":"@codelowered, @codewarntype","text":"","category":"section"},{"location":"content/debug/","page":"Debugging Julia","title":"Debugging Julia","text":"Debugging workflow: time (look for allocations), types, lowering, rr?","category":"page"},{"location":"content/intro/#Let's-Be-Honest-About-Julia","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"","category":"section"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"In casual conversation, the word \"simple\" is often used interchangeably with the phrase \"easy to use\"; however, when it comes to tools that we use on a daily basis, the two concepts might actually be opposite of each other. For example, let's say you are asked to cut down a forest and are given the choice of two tools: either a chainsaw or an axe [1] Clearly, the axe is simpler to use. Just pick it up, point the bladed edge towards a tree, and chop. The chainsaw, on the other hand, requires a bit more knowledge on how to power it, keep the chains lubricated, and ensure the safety of yourself and everyone around you. Even with this added complexity, you would probably choose the chainsaw over the axe because it is simply way easier to chop down a bunch of trees with it. In short: for this problem, the axe is simpler, but the chainsaw is easier to use.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"[1]: For the record, I am not advocating that you actually cut down a forest. This discussion is purely hypothetical.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"It's important to make this distinction with software as well. Often times, the easiest software to use is also the most complicated under-the-hood. Simultaneously, the simplest software is the hardest to use in practice. Take C for example. It is a simple programming language – so simple, in fact, that it can be called from almost any other high-level language with ease. It's also blazingly fast, usually the fastest language you could choose for most tasks. So why not just code directly in C? Because it's too simple. It's missing a lot of the features modern-day users want: plotting, dynamic recompilation, safe memory management, and so on.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"So why did I bring all this up? Because Julia is simultaneously the easiest language I have ever used and the most complicated under the hood.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"It has a dynamic shell (Read-Eval-Print-Loop, or REPL), just like Python which allows for fast prototyping. It gets fantastic performance because all the functions compile down to the same intermediate representation as C (LLVM). It has a great package manager, plotting utilities, and garbage collector for memory management. It also has the best General-Purpose Graphics Processing Unit (GPGPU) ecosystem I have ever seen.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"But surely there's a catch, right? Yeah. There certainly is.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"With all of it's complexity, Julia (at the time of writing, 2024) cannot reliably generate an executable for many projects [2], which means you need to wait for some (sometimes lengthy) pre-compile times every time you want to run code. Also, as much as Julia wants to compete in the same space as languages like Python, it does not quite have the same user-base and is currently not used in many key areas, like game and web development. Julia does a good enough job replacing data science languages like matlab, but the truth is that people using matlab do not usually want to switch languages.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"[2]: Note that it is possible to compile everything ahead-of-time with PkgCompiler.jl, but this leads to very large executable sizes which are not ideal for most applications.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"So why? Why use Julia today? Well, there could be a number of reasons. Maybe you care a lot about performance, but are tired of maintaining so much C code. Maybe you like matlab, but want more performance or are otherwise tired of paying the licensing costs. Maybe you just want to be part of a vibrant open-source community of people working to make Julia great.","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"The point is that there are a lot of really good reasons to use Julia. Just keep in mind that there is no such thing as a perfect language. Like I said before, Julia is a chainsaw. Sometimes you might still want an axe and that's totally ok!","category":"page"},{"location":"content/intro/","page":"Let's Be Honest About Julia","title":"Let's Be Honest About Julia","text":"Julia does not need to be the only language you use going forward, but I hope that (after reading this book), you'll find a couple of good uses for it that you might not have otherwise known about.","category":"page"},{"location":"content/development/#Everything-you-need-to-know-about-package-development","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"","category":"section"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"Ok, now we have package development and basic syntax down. There is still a lot more to programming: tests, documentation, etc. Here, I'll show all that off","category":"page"},{"location":"content/development/#Revise.jl","page":"Everything you need to know about package development","title":"Revise.jl","text":"","category":"section"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"Note: REWORK SECTION TO USE NEWPACKAGE INSTEAD OF PLOTS AS THIS IS MORE RELEVANT TO REVISE.JL","category":"page"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"Backspace # to go back to the regular REPL\njulia> using Plots\n[ Info: Precompiling Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80]","category":"page"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"It took a while, but everything seems to be precompiled. Just for fun, let's close Julia and use Plots again.","category":"page"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"julia> exit()\njulia --project \njulia> using Plots","category":"page"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"Hmm... That also took a while. Not as long as before, but it wasn't quick.","category":"page"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"As it turns out, Julia's precompile time is sometimes quite long. If you are making a bunch of changes to a package, you might need to recompile your code again and again while bug hunting. That kinda sucks.","category":"page"},{"location":"content/development/#Testing,-building,-and-interacting-with-github","page":"Everything you need to know about package development","title":"Testing, building, and interacting with github","text":"","category":"section"},{"location":"content/development/#Testing","page":"Everything you need to know about package development","title":"Testing","text":"","category":"section"},{"location":"content/development/#CI","page":"Everything you need to know about package development","title":"CI","text":"","category":"section"},{"location":"content/development/#Documentation","page":"Everything you need to know about package development","title":"Documentation","text":"","category":"section"},{"location":"content/development/#TagBot","page":"Everything you need to know about package development","title":"TagBot","text":"","category":"section"},{"location":"content/development/","page":"Everything you need to know about package development","title":"Everything you need to know about package development","text":"Ok, that's everything I can think of about package management in Julia.","category":"page"},{"location":"content/reviewers/#Reviewer-Guidelines","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"","category":"section"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"This book is currently in a \"beta reading\" state. That means that I am actively looking for feedback from you, the beta reader. If there is anything funky about the book, please let me know on github or discord. Possible funkiness includes:","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"Typos\nUnclear concepts\nUnnecessary rambling\nImpossible problems","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"... And the like.","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"note: Reviewer Notice\nI will also have a few reviewer notices scattered throughout the book for specific issues that I want more input on.","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"Please keep in mind that I am trying to make Julia as easy to understand as possible. It's really hard to do this right. For example, I might over-explain a few concepts that otherwise might be seen as \"trivial\". I might also omit \"important\" jargon that I feel is unnecessary. I am really (overly) relying on you all to gently nudge the book in the right direction and welcome feedback from programmers of all levels.","category":"page"},{"location":"content/reviewers/#Prominent-Reviewers","page":"Reviewer Guidelines","title":"Prominent Reviewers","text":"","category":"section"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"I feel peer review is an essential part of any academic work. I also feel that it is important to be as transparent as possible about that review process.","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"When the book is finalized, I will ask a few experts that I know to review the work and tell me what they think. With their permission, I will then put their name somewhere in the acknowledgments for the book (probably next to an \"About the Author\" section or something). If you would like to be considered as a \"Prominent Reviewer,\" please...","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"Review a full chapter as if it were an academic paper. I mean, really rip the book to shreds and tell me how big of an idiot I am.\nLet me know your academic background so I can include you.","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"I'll also be keeping an eye out for people who contribute substantially during the review process and reaching out to them to see if they would like to be listed as a \"Prominent Reviewer\" as well.","category":"page"},{"location":"content/reviewers/","page":"Reviewer Guidelines","title":"Reviewer Guidelines","text":"I think that's all for now. Thanks for reading the book and I hope it is helpful in some way!","category":"page"},{"location":"#What's-going-on?","page":"Welcome","title":"What's going on?","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"This is a freely available version of my book Intro.jl: a quick-start guide to Julia. ","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"All of the content on this site was created by James Schloss (Leios). The code is released under the MIT license, which means you can use it for virtually any purpose as long as you attribute me and you let everyone know that my code is freely available under the MIT license for use. The text is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA). This means that you are free to read, copy, modify, and remix any of the text here with a few key restrictions. Namely, the new (derivative) work:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"Cannot make money.\nMust attribute me (James Schloss or Leios).\nMust be available for free with the same Creative Commons license. In other words, derivatives of derivatives of this work cannot make money and also must attribute me (and any additional authors).","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"if this book is useful for you, please consider purchasing it when it is officially released. Otherwise, please let me know if there are any typos, errors, or jank that you find along the way.","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"Thanks for reading and I hope the book helps you in some way!","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"Dr. James Schloss (Leios)","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"(Image: CC BY NC SA)","category":"page"}]
}
